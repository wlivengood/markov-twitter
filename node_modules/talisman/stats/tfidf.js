'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TfIdf = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
alisman stats/tfidf


elpers related to TF/IDF computations.

eference]: https://en.wikipedia.org/wiki/Tf%E2%80%93idf



var _frequencies = require('./frequencies');

var _naive = require('../tokenizers/words/naive');

var _naive2 = _interopRequireDefault(_naive);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * TfIdf class
 *
 * @constructor
 * @param {array} docs - Initial documents.
 */
var TfIdf = exports.TfIdf = function () {
  function TfIdf() {
    _classCallCheck(this, TfIdf);

    // Properties
    this.docs = {};
  }

  /**
   * Adding a document to the corpus.
   *
   * @param  {string}        name - Name of the document to add.
   * @param  {array|string}  doc  - The document to add.
   * @return {TfIdf}              - Returns itself for chaining purposes.
   */


  _createClass(TfIdf, [{
    key: 'addDocument',
    value: function addDocument(name, doc) {

      // If the document's body is passed as a string, we tokenize it naively
      if (typeof doc === 'string') doc = (0, _naive2.default)(doc);

      // Computing frequencies
      var docFrequencies = (0, _frequencies.relative)(doc);

      // Storing the document
      this.docs[name] = docFrequencies;

      return this;
    }

    /**
     * Retrieving the Term Frequency of a term in a document.
     *
     * @param  {string}        term   - Term.
     * @param  {string}        [name] - Optional document to poll.
     * @return {object|number}        - Returns the tf or an index of tf per doc.
     */

  }, {
    key: 'tf',
    value: function tf(term, name) {
      if (name) {
        var doc = this.docs[name];

        if (!doc) throw Error('talisman/stats/tfidf.tf: the "' + name + '" doesn\'t exist.');

        return doc[term] || 0;
      }

      var tfIndex = {};

      for (var k in this.docs) {
        tfIndex[k] = this.docs[k][term] || 0;
      }return tfIndex;
    }

    /**
     * Retrieving the Inverse Document Frequency of a term in the corpus.
     *
     * @param  {string} term   - Term.
     * @return {number}        - Returns the idf of the term.
     */

  }, {
    key: 'idf',
    value: function idf(term) {
      var docs = Object.keys(this.docs);

      if (!docs.length) return 0;

      // First, we need to count the documents having the term
      var matchingDocs = 0;
      for (var i = 0, l = docs.length; i < l; i++) {
        if (this.docs[docs[i]][term]) matchingDocs++;
      }

      if (!matchingDocs) return 0;

      return Math.log(docs.length / matchingDocs);
    }

    /**
     * Retrieving the TF-IDF of a term in the corpus.
     *
     * @param  {string}        term   - Term.
     * @param  {string}        [name] - Optional document to poll.
     * @return {object|number}        - Returns the tf or an index of tf per doc.
     */

  }, {
    key: 'tfidf',
    value: function tfidf(term, name) {
      if (name) {
        var tf = this.tf(term, name),
            idf = this.idf(term);

        return tf * idf;
      }

      var tfidfIndex = {};

      for (var k in this.docs) {
        tfidfIndex[k] = this.tfidf(term, k);
      }return tfidfIndex;
    }
  }]);

  return TfIdf;
}();