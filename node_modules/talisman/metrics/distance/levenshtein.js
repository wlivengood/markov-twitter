"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = levenshtein;
/**
 * Talisman metrics/distance/levenshtein
 * ======================================
 *
 * Functions computing the Levenshtein distance.
 *
 * [Reference]: https://en.wikipedia.org/wiki/Levenshtein_distance
 *
 * [Article]:
 * Levenshtein, Vladimir I. (February 1966). "Binary codes capable of
 * correcting deletions, insertions, and reversals".
 * Soviet Physics Doklady 10 (8): 707â€“710.
 */

/**
 * Function returning the Levenshtein distance between two sequences.
 *
 * @param  {mixed}  a - The first sequence to process.
 * @param  {mixed}  b - The second sequence to process.
 * @return {number}   - The Levenshtein distance between a & b.
 */
function levenshtein(a, b) {
  if (a === b) return 0;

  if (!a.length) return b.length;
  if (!b.length) return a.length;

  var previousRow = new Array(b.length + 1);

  for (var i = 0, l = previousRow.length; i < l; i++) {
    previousRow[i] = i;
  }var nextColumn = void 0,
      currentColumn = void 0,
      buffer = void 0,
      j = void 0;

  for (var _i = 0, _l = a.length; _i < _l; _i++) {
    nextColumn = _i + 1;

    var m = b.length;
    for (j = 0; j < m; j++) {
      currentColumn = nextColumn;

      // Substitution
      nextColumn = previousRow[j] + (a[_i] === b[j] ? 0 : 1);

      // Insertion
      buffer = currentColumn + 1;
      if (nextColumn > buffer) nextColumn = buffer;

      // Deletion
      buffer = previousRow[j + 1] + 1;
      if (nextColumn > buffer) nextColumn = buffer;

      previousRow[j] = currentColumn;
    }

    previousRow[j] = nextColumn;
  }

  return nextColumn;
}

/**
 * Alternative export.
 */
exports.distance = levenshtein;